generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model audit_logs {
  id        String   @id
  userId    String?
  action    String
  entity    String
  entityId  String?
  oldData   String?
  newData   String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
}

model broadcasts {
  id                   String          @id
  title                String
  message              String
  type                 BroadcastType
  targetAudience       TargetAudience
  unitTarget           String?
  status               BroadcastStatus @default(DRAFT)
  scheduledAt          DateTime?
  sentAt               DateTime?
  totalRecipients      Int             @default(0)
  successfulDeliveries Int             @default(0)
  failedDeliveries     Int             @default(0)
  createdById          String
  createdAt            DateTime        @default(now())
  updatedAt            DateTime
  users                users           @relation(fields: [createdById], references: [id])
}

model categories {
  id          String     @id
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime
  products    products[]
}

model consignment_batches {
  id                String              @id
  code              String              @unique
  consignorId       String
  productId         String
  qtyIn             Int
  qtySold           Int                 @default(0)
  qtyReturned       Int                 @default(0)
  qtyExpired        Int                 @default(0)
  qtyRemaining      Int
  feeType           FeeType
  feePercent        Decimal?
  feeFlat           Decimal?
  receivedAt        DateTime            @default(now())
  expiryAt          DateTime?
  status            BatchStatus         @default(ACTIVE)
  note              String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  consignors        consignors          @relation(fields: [consignorId], references: [id])
  products          products            @relation(fields: [productId], references: [id])
  consignment_sales consignment_sales[]

  @@index([consignorId, receivedAt])
  @@index([productId, status])
  @@index([receivedAt])
}

model consignment_sales {
  id                  String              @id
  batchId             String
  transactionItemId   String
  qtySold             Int
  unitPrice           Decimal
  totalRevenue        Decimal
  feeType             FeeType
  feeAmount           Decimal
  netToConsignor      Decimal
  settlementId        String?
  isSettled           Boolean             @default(false)
  saleDate            DateTime            @default(now())
  createdAt           DateTime            @default(now())
  consignment_batches consignment_batches @relation(fields: [batchId], references: [id])
  settlements         settlements?        @relation(fields: [settlementId], references: [id])
  transaction_items   transaction_items   @relation(fields: [transactionItemId], references: [id])

  @@index([batchId])
  @@index([saleDate])
  @@index([settlementId])
}

model consignors {
  id                  String                @id
  code                String                @unique
  name                String
  contact             String?
  phone               String?
  email               String?
  address             String?
  feeType             FeeType               @default(PERCENTAGE)
  defaultFeePercent   Decimal?
  defaultFeeFlat      Decimal?
  paymentSchedule     String?
  isActive            Boolean               @default(true)
  note                String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  consignment_batches consignment_batches[]
  settlements         settlements[]
}

model loan_payments {
  id          String   @id
  loanId      String
  amount      Decimal
  paymentDate DateTime @default(now())
  description String?
  createdAt   DateTime @default(now())
  loans       loans    @relation(fields: [loanId], references: [id], onDelete: Cascade)
}

model loans {
  id              String          @id
  memberId        String
  amount          Decimal
  interestRate    Decimal
  tenor           Int
  monthlyPayment  Decimal
  remainingAmount Decimal
  status          LoanStatus      @default(ACTIVE)
  startDate       DateTime        @default(now())
  endDate         DateTime
  description     String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime
  loan_payments   loan_payments[]
  members         members         @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model members {
  id               String         @id
  userId           String         @unique
  nomorAnggota     String         @unique
  name             String
  email            String         @unique
  phone            String?
  address          String?
  gender           Gender
  unitKerja        String
  joinDate         DateTime       @default(now())
  status           MemberStatus   @default(ACTIVE)
  simpananPokok    Decimal        @default(0)
  simpananWajib    Decimal        @default(0)
  simpananSukarela Decimal        @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime
  loans            loans[]
  users            users          @relation(fields: [userId], references: [id], onDelete: Cascade)
  savings          savings[]
  transactions     transactions[]
}

model products {
  id                  String                @id
  name                String
  description         String?
  categoryId          String
  sku                 String?               @unique
  buyPrice            Decimal?
  sellPrice           Decimal
  avgCost             Decimal?
  stock               Int                   @default(0)
  threshold           Int                   @default(5)
  unit                String                @default("pcs")
  ownershipType       OwnershipType         @default(TOKO)
  stockCycle          StockCycle            @default(MINGGUAN)
  isConsignment       Boolean               @default(false)
  status              ProductStatus         @default(ACTIVE)
  isActive            Boolean               @default(true)
  lastRestockAt       DateTime?
  expiryPolicy        String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  supplierContact     String?
  supplierId          String?
  consignment_batches consignment_batches[]
  categories          categories            @relation(fields: [categoryId], references: [id])
  suppliers           suppliers?            @relation(fields: [supplierId], references: [id])
  purchase_items      purchase_items[]
  stock_movements     stock_movements[]
  transaction_items   transaction_items[]
}

model purchase_items {
  id         String    @id
  purchaseId String
  productId  String
  quantity   Int
  unitCost   Decimal
  totalCost  Decimal
  createdAt  DateTime  @default(now())
  products   products  @relation(fields: [productId], references: [id])
  purchases  purchases @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([purchaseId])
}

model purchases {
  id             String                @id
  code           String                @unique
  supplierId     String
  totalAmount    Decimal               @default(0)
  purchaseDate   DateTime              @default(now())
  receivedDate   DateTime?
  status         PurchaseStatus        @default(PENDING)
  paymentStatus  PurchasePaymentStatus @default(UNPAID)
  paymentDate    DateTime?
  note           String?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime
  purchase_items purchase_items[]
  suppliers      suppliers             @relation(fields: [supplierId], references: [id])

  @@index([supplierId, purchaseDate])
}

model savings {
  id          String     @id
  memberId    String
  type        SavingType
  amount      Decimal
  description String?
  date        DateTime   @default(now())
  createdAt   DateTime   @default(now())
  members     members    @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model settlements {
  id                String              @id
  code              String              @unique
  consignorId       String
  periodStart       DateTime
  periodEnd         DateTime
  totalRevenue      Decimal             @default(0)
  totalFee          Decimal             @default(0)
  totalPayable      Decimal             @default(0)
  status            SettlementStatus    @default(PENDING)
  paymentMethod     PaymentMethod?
  paymentDate       DateTime?
  paymentRef        String?
  note              String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  consignment_sales consignment_sales[]
  consignors        consignors          @relation(fields: [consignorId], references: [id])

  @@index([consignorId, periodStart])
  @@index([status])
}

model stock_movements {
  id            String         @id
  productId     String
  movementType  MovementType
  quantity      Int
  unitCost      Decimal?
  referenceType ReferenceType?
  referenceId   String?
  note          String?
  occurredAt    DateTime       @default(now())
  createdAt     DateTime       @default(now())
  products      products       @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId, occurredAt])
  @@index([referenceType, referenceId])
}

model supplier_payments {
  id                String                    @id
  supplierProfileId String
  amount            Decimal
  paymentMethod     PaymentMethod             @default(TRANSFER)
  paymentDate       DateTime                  @default(now())
  periodStart       DateTime
  periodEnd         DateTime
  referenceNo       String?
  verifiedBy        String?
  verifiedAt        DateTime?
  status            PaymentVerificationStatus @default(PENDING)
  note              String?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime
  supplier_profiles supplier_profiles         @relation(fields: [supplierProfileId], references: [id], onDelete: Cascade)

  @@index([supplierProfileId, paymentDate])
}

model supplier_profiles {
  id                String              @id
  userId            String?             @unique
  businessName      String
  ownerName         String
  email             String              @unique
  phone             String
  address           String
  productCategory   String
  description       String?
  password          String?
  status            SupplierStatus      @default(PENDING)
  paymentStatus     PaymentStatus       @default(UNPAID)
  approvedById      String?
  approvedAt        DateTime?
  rejectedReason    String?
  monthlyFee        Decimal             @default(25000)
  lastPaymentDate   DateTime?
  nextPaymentDue    DateTime?
  isPaymentActive   Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  supplier_payments supplier_payments[]
  users             users?              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model suppliers {
  id           String      @id
  code         String      @unique
  name         String
  contact      String?
  phone        String?
  email        String?
  address      String?
  paymentTerms String?
  isActive     Boolean     @default(true)
  note         String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime
  products     products[]
  purchases    purchases[]
}

model transaction_items {
  id                String              @id
  transactionId     String
  productId         String
  quantity          Int
  unitPrice         Decimal
  totalPrice        Decimal
  cogsPerUnit       Decimal?
  totalCogs         Decimal?
  grossProfit       Decimal?
  createdAt         DateTime            @default(now())
  consignment_sales consignment_sales[]
  products          products            @relation(fields: [productId], references: [id])
  transactions      transactions        @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([transactionId])
}

model transactions {
  id                String              @id
  memberId          String?
  type              TransactionType
  totalAmount       Decimal
  paymentMethod     PaymentMethod       @default(CASH)
  status            TransactionStatus   @default(COMPLETED)
  note              String?
  date              DateTime            @default(now())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  transaction_items transaction_items[]
  members           members?            @relation(fields: [memberId], references: [id])
}

model users {
  id                String              @id
  email             String              @unique
  password          String
  name              String
  role              Role                @default(USER)
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  broadcasts        broadcasts[]
  members           members?
  supplier_profiles supplier_profiles?
}

enum BatchStatus {
  ACTIVE
  DEPLETED
  RETURNED
  EXPIRED
}

enum BroadcastStatus {
  DRAFT
  SCHEDULED
  SENT
  FAILED
}

enum BroadcastType {
  ANNOUNCEMENT
  URGENT
  INFO
  REMINDER
}

enum FeeType {
  PERCENTAGE
  FLAT
  HYBRID
}

enum Gender {
  MALE
  FEMALE
}

enum LoanStatus {
  ACTIVE
  COMPLETED
  OVERDUE
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum MovementType {
  PURCHASE_IN
  CONSIGNMENT_IN
  SALE_OUT
  RETURN_IN
  RETURN_OUT
  EXPIRED_OUT
  ADJUSTMENT
  TRANSFER_IN
  TRANSFER_OUT
}

enum OwnershipType {
  TOKO
  TITIPAN
}

enum PaymentMethod {
  CASH
  TRANSFER
  CREDIT
}

enum PaymentStatus {
  UNPAID
  PAID_PENDING_APPROVAL
  PAID_APPROVED
  PAID_REJECTED
}

enum PaymentVerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  SEASONAL
}

enum PurchasePaymentStatus {
  UNPAID
  PARTIAL
  PAID
}

enum PurchaseStatus {
  PENDING
  RECEIVED
  CANCELLED
}

enum ReferenceType {
  PURCHASE
  CONSIGNMENT_BATCH
  SALE
  ADJUSTMENT
  EXPIRY
}

enum Role {
  SUPER_ADMIN
  ADMIN
  SUPPLIER
  USER
}

enum SavingType {
  POKOK
  WAJIB
  SUKARELA
  WITHDRAWAL
}

enum SettlementStatus {
  PENDING
  PAID
  CANCELLED
  DISPUTED
}

enum StockCycle {
  HARIAN
  MINGGUAN
  DUA_MINGGUAN
}

enum SupplierStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
  ACTIVE
}

enum TargetAudience {
  ALL
  ACTIVE_MEMBERS
  UNIT_SPECIFIC
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum TransactionType {
  SALE
  PURCHASE
  RETURN
  INCOME
  EXPENSE
}
