// Transaction Table Component  
// Full transaction table with view, edit, delete actions

import { Button } from '@/components/ui/button';
import { Table, TableHeader, TableBody, TableRow, TableHead, TableCell } from '@/components/ui/table';
import { CardSkeleton } from '@/components/ui/loading';
import { Eye, Edit, Trash2, Plus, Receipt } from 'lucide-react';
import { formatCurrency, formatTime } from '@/lib/utils';
import {
  getTransactionTypeColor,
  getTransactionTypeIcon,
  getPaymentMethodIcon,
  getTransactionTypeLabel,
  getPaymentMethodLabel,
  isAutoGeneratedTransaction,
  isManualTransaction
} from '@/lib/financial-helpers';
import type { Transaction } from '@/types/financial';

interface TransactionTableProps {
  transactions: Transaction[];
  loading: boolean;
  onView: (transaction: Transaction) => void;
  onEdit: (transaction: Transaction) => void;
  onDelete: (transactionId: string) => void;
  onShowAddModal: () => void;
}

export function TransactionTable({
  transactions,
  loading,
  onView,
  onEdit,
  onDelete,
  onShowAddModal
}: TransactionTableProps) {
  
  if (loading) {
    return (
      <div className="space-y-4">
        <CardSkeleton />
        <CardSkeleton />
        <CardSkeleton />
      </div>
    );
  }

  if (transactions.length === 0) {
    return (
      <div className="text-center py-8">
        <Receipt className="w-12 h-12 text-gray-300 mx-auto mb-4" />
        <p className="text-gray-500">Belum ada transaksi pada tanggal ini</p>
        <Button className="mt-4" onClick={onShowAddModal}>
          <Plus className="w-4 h-4 mr-2" />
          Catat Pemasukan/Pengeluaran Pertama
        </Button>
      </div>
    );
  }

  return (
    <div className="overflow-x-auto">
      <Table>
        <TableHeader>
          <TableRow className="bg-gray-50">
            <TableHead className="font-semibold text-gray-900">Tipe & Deskripsi</TableHead>
            <TableHead className="font-semibold text-gray-900">Kategori</TableHead>
            <TableHead className="font-semibold text-gray-900">Jumlah</TableHead>
            <TableHead className="font-semibold text-gray-900">Metode Bayar</TableHead>
            <TableHead className="font-semibold text-gray-900">Waktu</TableHead>
            <TableHead className="font-semibold text-gray-900 text-center">Aksi</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {transactions.map((transaction) => (
            <TableRow 
              key={transaction.id}
              className="hover:bg-gray-50 transition-colors"
            >
              <TableCell className="py-4">
                <div className="flex items-center gap-3">
                  <div className={`p-2 rounded-full ${getTransactionTypeColor(transaction.type)}`}>
                    {getTransactionTypeIcon(transaction.type)}
                  </div>
                  <div>
                    <p className="font-medium text-gray-900">{transaction.description}</p>
                    <div className="flex items-center gap-2 mt-1 flex-wrap">
                      <span className={`inline-block px-2 py-0.5 rounded-full text-xs font-medium ${getTransactionTypeColor(transaction.type)}`}>
                        {getTransactionTypeLabel(transaction.type)}
                      </span>
                      {/* Source indicator badge */}
                      {isAutoGeneratedTransaction(transaction.type) && (
                        <span className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-200 text-gray-700">
                          Otomatis
                        </span>
                      )}
                    </div>
                  </div>
                </div>
              </TableCell>
              <TableCell className="py-4">
                <span className="text-gray-700 font-medium">{transaction.category || '-'}</span>
              </TableCell>
              <TableCell className="py-4">
                <span className={`font-bold text-base ${
                  transaction.type === 'SALE' || transaction.type === 'INCOME' 
                    ? 'text-emerald-600' 
                    : 'text-red-600'
                }`}>
                  {transaction.type === 'SALE' || transaction.type === 'INCOME' ? '+' : '-'}
                  {formatCurrency(transaction.amount)}
                </span>
              </TableCell>
              <TableCell className="py-4">
                <div className="flex items-center gap-2">
                  {/* Show "-" for auto-generated transactions */}
                  {isAutoGeneratedTransaction(transaction.type) ? (
                    <span className="text-gray-400 text-sm">-</span>
                  ) : (
                    <>
                      {getPaymentMethodIcon(transaction.paymentMethod)}
                      <span className="text-gray-700 font-medium">
                        {getPaymentMethodLabel(transaction.paymentMethod)}
                      </span>
                    </>
                  )}
                </div>
              </TableCell>
              <TableCell className="py-4">
                <span className="text-gray-600 text-sm font-medium">
                  {formatTime(transaction.createdAt)}
                </span>
              </TableCell>
              <TableCell>
                <div className="flex items-center justify-center gap-1">
                  {/* View Button */}
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => onView(transaction)}
                    className="p-1.5 text-blue-600 hover:bg-blue-50"
                    title="Lihat Detail"
                  >
                    <Eye className="w-3 h-3" />
                  </Button>
                  
                  {/* Only show edit/delete for manual transactions (INCOME and EXPENSE) */}
                  {isManualTransaction(transaction.type) ? (
                    <>
                      {/* Edit Button */}
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => onEdit(transaction)}
                        className="p-1.5 text-amber-600 hover:bg-amber-50"
                        title="Edit Transaksi"
                      >
                        <Edit className="w-3 h-3" />
                      </Button>
                      
                      {/* Delete Button */}
                      <Button
                        size="sm"
                        variant="danger"
                        onClick={() => onDelete(transaction.id)}
                        className="p-1.5"
                        title="Hapus Transaksi"
                      >
                        <Trash2 className="w-3 h-3" />
                      </Button>
                    </>
                  ) : (
                    <span className="text-xs text-gray-500 px-2 py-1 bg-gray-50 rounded">
                      Auto
                    </span>
                  )}
                </div>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  );
}
